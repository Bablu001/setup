- name: Monitor EKS using Prometheus and Grafana via Helm
  hosts: master
  become: yes
  vars:
    prometheus_namespace: prometheus

  tasks:

    - name: Download Helm install script
      get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get_helm.sh
        mode: '0700'

    - name: Run Helm install script
      shell: ./get_helm.sh
      args:
        chdir: /tmp
      register: helm_install_output

    - name: Add Helm stable repo
      shell: helm repo add stable https://charts.helm.sh/stable
      ignore_errors: yes

    - name: Add Prometheus community repo
      shell: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

    - name: Update Helm repos
      shell: helm repo update

    - name: Create Prometheus namespace
      shell: kubectl create namespace {{ prometheus_namespace }}
      ignore_errors: yes

    - name: Install kube-prometheus-stack
      shell: helm install stable prometheus-community/kube-prometheus-stack -n {{ prometheus_namespace }}
      register: helm_prometheus_output
      ignore_errors: yes

    - name: Wait for Prometheus pods to be ready
      shell: |
        kubectl wait --for=condition=Ready pods --all -n {{ prometheus_namespace }} --timeout=300s
      register: wait_output
      ignore_errors: yes

    - name: Change Prometheus service to NodePort
      shell: |
        kubectl patch svc stable-kube-prometheus-sta-prometheus \
        -n {{ prometheus_namespace }} \
        -p '{"spec": {"type": "NodePort"}}'
      ignore_errors: yes

    - name: Change Grafana service to NodePort
      shell: |
        kubectl patch svc stable-grafana \
        -n {{ prometheus_namespace }} \
        -p '{"spec": {"type": "NodePort"}}'
      ignore_errors: yes

    - name: Get Grafana service info
      shell: kubectl get svc stable-grafana -n {{ prometheus_namespace }}
      register: grafana_svc_output

    - name: Get Grafana admin password
      shell: >
        kubectl get secret --namespace {{ prometheus_namespace }} stable-grafana
        -o jsonpath="{.data.admin-password}" | base64 --decode
      register: grafana_password

    - name: Show Grafana admin password
      debug:
        msg: "Grafana admin password is '{{ grafana_password.stdout }}'"
